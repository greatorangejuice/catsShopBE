{"version":3,"file":"src/functions/createProduct/handler.js","mappings":"yDAMO,MAAMA,EAAqB,CAACC,EAAmCC,EAAa,OAC1E,CACLC,QAAS,CACP,8BAAgC,IAChC,oCAAqC,GAEvCD,WAAAA,EACAE,KAAMC,KAAKC,UAAUL,M,uECVlB,MAAMM,EAAWC,GACf,IAAMA,GAASC,IAAI,Q,4CCQrB,MAAMC,EAAY,WAAaC,MAAM,CACxCC,MAAO,WAAaC,WACpBC,YAAa,WACbC,MAAO,WAAaF,WACpBG,MAAO,WAAaH,WACpBI,QAAS,WAAaJ,c,QCjB1BK,EAAOC,QAAUC,QAAQ,gB,QCAzBF,EAAOC,QAAUC,QAAQ,iC,QCAzBF,EAAOC,QAAUC,QAAQ,O,OCAzBF,EAAOC,QAAUC,QAAQ,gC,QCAzBF,EAAOC,QAAUC,QAAQ,SCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,QCpBfG,EAAoBK,EAAKT,IACxB,IAAIU,EAASV,GAAUA,EAAOW,WAC7B,IAAOX,EAAiB,QACxB,IAAM,EAEP,OADAI,EAAoBQ,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRN,EAAoBQ,EAAI,CAACX,EAASa,KACjC,IAAI,IAAIC,KAAOD,EACXV,EAAoBY,EAAEF,EAAYC,KAASX,EAAoBY,EAAEf,EAASc,IAC5EE,OAAOC,eAAejB,EAASc,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EX,EAAoBY,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFlB,EAAoBsB,EAAKzB,IACH,oBAAX0B,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAejB,EAAS0B,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAejB,EAAS,aAAc,CAAE4B,OAAO,K,4GCEvD,MAAM,QAACC,EAAO,QAAEC,EAAO,YAAEC,EAAW,YAAEC,EAAW,YAAEC,GAAeC,QAAQC,IACpEC,EAAY,CACdC,KAAMR,EACNS,KAAMR,EACNS,SAAUR,EACVS,KAAMR,EACNS,SAAUR,EACVS,IAAK,CACDC,oBAAoB,GAExBC,wBAAyB,KAGhBC,EAAgBC,MAAOC,IAChC,MAAMC,EAAS,IAAI,EAAAC,OAAOb,SACpBY,EAAOE,UAIb,MAAM,MAACzD,EAAK,MAAEG,EAAK,YAAED,EAAW,QAAEG,EAAO,MAAED,GAASkD,EAAE9D,KAChDkE,EAAwB,CAAC1D,MAAAA,EAAOG,MAAAA,EAAOD,YAAAA,EAAaG,QAAAA,EAASD,MAAAA,GACnEuD,QAAQC,IAAIF,GACZ,IAAIG,GAAc,EAElB,IAII,SAHM,YAAkBH,GAAKI,MAAMC,IAC/BF,EAAcE,MAEbF,EACD,OAAO,OAAmB,CACtBG,QAAS,0BACV,KAGP,MAGMC,SAHaV,EAAOW,MACtB,qEAAqElE,OAAWG,OAAWD,OAAiBG,qBAE7F8D,KAAKC,MAAKC,GAAQA,IAAMC,GAM3C,aAJMf,EAAOW,MACT,mDAAmDD,OAAW7D,OAG3D,OAAmB,CACtB4D,QAAS,WAAWhE,aAE1B,MAAOsD,GACL,OAAO,OAAmB,CACtBU,QAAS,GAAGV,EAAEU,WACf,K,QAEHT,EAAOgB,QAKFC,GAAO,OAAQpB,I","sources":["webpack://product-service/./src/libs/apiGateway.ts","webpack://product-service/./src/libs/lambda.ts","webpack://product-service/./src/models/toy.ts","webpack://product-service/external \"@middy/core\"","webpack://product-service/external \"@middy/http-json-body-parser\"","webpack://product-service/external \"pg\"","webpack://product-service/external \"source-map-support/register\"","webpack://product-service/external \"yup\"","webpack://product-service/webpack/bootstrap","webpack://product-service/webpack/runtime/compat get default export","webpack://product-service/webpack/runtime/define property getters","webpack://product-service/webpack/runtime/hasOwnProperty shorthand","webpack://product-service/webpack/runtime/make namespace object","webpack://product-service/./src/functions/createProduct/handler.ts"],"sourcesContent":["import type { APIGatewayProxyEvent, APIGatewayProxyResult, Handler } from \"aws-lambda\"\r\nimport type { FromSchema } from \"json-schema-to-ts\";\r\n\r\ntype ValidatedAPIGatewayProxyEvent<S> = Omit<APIGatewayProxyEvent, 'body'> & { body: FromSchema<S> }\r\nexport type ValidatedEventAPIGatewayProxyEvent<S> = Handler<ValidatedAPIGatewayProxyEvent<S>, APIGatewayProxyResult>\r\n\r\nexport const formatJSONResponse = (response: Record<string, unknown>, statusCode = 200) => {\r\n  return {\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\" : \"*\", // Required for CORS support to work\r\n      \"Access-Control-Allow-Credentials\" : true // Required for cookies, authorization headers with HTTPS\r\n    },\r\n    statusCode,\r\n    body: JSON.stringify(response)\r\n  }\r\n}\r\n","import middy from \"@middy/core\"\nimport middyJsonBodyParser from \"@middy/http-json-body-parser\"\n\nexport const middyfy = (handler) => {\n  return middy(handler).use(middyJsonBodyParser())\n}\n","import * as Yup from 'yup';\r\n\r\nexport interface IToy {\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    price: number,\r\n    count: number,\r\n    imglink: string\r\n}\r\n\r\n\r\nexport const ToySchema = Yup.object().shape({\r\n    title: Yup.string().required(),\r\n    description: Yup.string(),\r\n    price: Yup.number().required(),\r\n    count: Yup.number().required(),\r\n    imglink: Yup.string().required(),\r\n});\r\n","module.exports = require(\"@middy/core\");","module.exports = require(\"@middy/http-json-body-parser\");","module.exports = require(\"pg\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"yup\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import 'source-map-support/register';\r\n\r\nimport {formatJSONResponse} from '@libs/apiGateway';\r\nimport {middyfy} from '@libs/lambda';\r\nimport {Client} from 'pg';\r\nimport {IToy, ToySchema} from \"../../models/toy\";\r\n\r\nconst {PG_HOST, PG_PORT, PG_DATABASE, PG_USERNAME, PG_PASSWORD} = process.env;\r\nconst dbOptions = {\r\n    host: PG_HOST,\r\n    port: PG_PORT,\r\n    database: PG_DATABASE,\r\n    user: PG_USERNAME,\r\n    password: PG_PASSWORD,\r\n    ssl: {\r\n        rejectUnauthorized: false,\r\n    },\r\n    connectionTimeoutMillis: 5000,\r\n}\r\n\r\nexport const createProduct = async (e) => {\r\n    const client = new Client(dbOptions);\r\n    await client.connect();\r\n    // const {title, price, birthday, breedid, imglink, count} = e.body;\r\n    // const cat: ICat = {title, price, birthday, breedid, imglink, count};\r\n\r\n    const {title, price, description, imglink, count} = e.body;\r\n    const toy: Omit<IToy, 'id'> = {title, price, description, imglink, count};\r\n    console.log(toy)\r\n    let isDataValid = true;\r\n\r\n    try {\r\n        await ToySchema.isValid(toy).then((isValid) => {\r\n            isDataValid = isValid\r\n        })\r\n        if (!isDataValid) {\r\n            return formatJSONResponse({\r\n                message: `Insert data is invalid`,\r\n            }, 400);\r\n        }\r\n\r\n        const toys = await client.query(\r\n            `insert into products(title, price, description, imglink) values ('${title}', ${price}, '${description}','${imglink}') returning id`\r\n        )\r\n        const toyId = toys.rows.find(item => item).id;\r\n\r\n        await client.query(\r\n            `insert into stocks (product_id, count) VALUES ('${toyId}', ${count})`\r\n        )\r\n\r\n        return formatJSONResponse({\r\n            message: `New toy ${title} added.`\r\n        });\r\n    } catch (e) {\r\n        return formatJSONResponse({\r\n            message: `${e.message}`,\r\n        }, 500);\r\n    } finally {\r\n        client.end()\r\n    }\r\n\r\n}\r\n\r\nexport const main = middyfy(createProduct);\r\n"],"names":["formatJSONResponse","response","statusCode","headers","body","JSON","stringify","middyfy","handler","use","ToySchema","shape","title","required","description","price","count","imglink","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","PG_HOST","PG_PORT","PG_DATABASE","PG_USERNAME","PG_PASSWORD","process","env","dbOptions","host","port","database","user","password","ssl","rejectUnauthorized","connectionTimeoutMillis","createProduct","async","e","client","Client","connect","toy","console","log","isDataValid","then","isValid","message","toyId","query","rows","find","item","id","end","main"],"sourceRoot":""}