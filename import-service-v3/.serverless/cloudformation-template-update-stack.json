{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ImportProductsFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/import-service-v3-dev-importProductsFile"
      }
    },
    "ImportFileParserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/import-service-v3-dev-importFileParser"
      }
    },
    "CatalogBatchProcessLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/import-service-v3-dev-catalogBatchProcess"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "import-service-v3",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/import-service-v3-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/import-service-v3-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": "arn:aws:s3:::rs-uploaded"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "arn:aws:s3:::rs-uploaded"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:*"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "SQSQueue",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:*"
                  ],
                  "Resource": {
                    "Ref": "SNSTopic"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SQSQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "import-service-v3",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ImportProductsFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/import-service-v3/dev/1631620684623-2021-09-14T11:58:04.623Z/import-service-v3.zip"
        },
        "Handler": "src/functions/importProductsFile/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "import-service-v3-dev-importProductsFile",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_URL": {
              "Ref": "SQSQueue"
            },
            "SNS_ARN": {
              "Ref": "SNSTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ImportProductsFileLogGroup"
      ]
    },
    "ImportFileParserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/import-service-v3/dev/1631620684623-2021-09-14T11:58:04.623Z/import-service-v3.zip"
        },
        "Handler": "src/functions/importFileParser/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "import-service-v3-dev-importFileParser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_URL": {
              "Ref": "SQSQueue"
            },
            "SNS_ARN": {
              "Ref": "SNSTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ImportFileParserLogGroup"
      ]
    },
    "CatalogBatchProcessLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/import-service-v3/dev/1631620684623-2021-09-14T11:58:04.623Z/import-service-v3.zip"
        },
        "Handler": "src/functions/catalogBatchProcess/handler.main",
        "Runtime": "nodejs14.x",
        "FunctionName": "import-service-v3-dev-catalogBatchProcess",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SQS_URL": {
              "Ref": "SQSQueue"
            },
            "SNS_ARN": {
              "Ref": "SNSTopic"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CatalogBatchProcessLogGroup"
      ]
    },
    "ImportProductsFileLambdaVersion39ccRgXiM4ThDY8mh92Bw5wU3D5bkMtVwi8Vj9T4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ImportProductsFileLambdaFunction"
        },
        "CodeSha256": "JcdvdI/iS6An89k+V4ARk1CHdRjdo45pO/BGWVPxQek="
      }
    },
    "ImportFileParserLambdaVersionoFktyhw0fALH1lp45leWsX1fwOcCPFJKxcqGUfE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ImportFileParserLambdaFunction"
        },
        "CodeSha256": "JcdvdI/iS6An89k+V4ARk1CHdRjdo45pO/BGWVPxQek="
      }
    },
    "CatalogBatchProcessLambdaVersionFKpD70uxL3ZClLeSE0UWLABAMhYPLIptCcYmsQZNw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CatalogBatchProcessLambdaFunction"
        },
        "CodeSha256": "JcdvdI/iS6An89k+V4ARk1CHdRjdo45pO/BGWVPxQek="
      }
    },
    "ImportFileParserCustomS31": {
      "Type": "Custom::S3",
      "Version": 1,
      "DependsOn": [
        "ImportFileParserLambdaFunction",
        "CustomDashresourceDashexistingDashs3LambdaFunction"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomDashresourceDashexistingDashs3LambdaFunction",
            "Arn"
          ]
        },
        "FunctionName": "import-service-v3-dev-importFileParser",
        "BucketName": "rs-uploaded",
        "BucketConfigs": [
          {
            "Event": "s3:ObjectCreated:*",
            "Rules": [
              {
                "Prefix": "uploadedFiles/"
              }
            ]
          }
        ]
      }
    },
    "IamRoleCustomResourcesLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "import-service-v3",
                  "custom-resources-lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "s3",
                        "",
                        "",
                        "rs-uploaded"
                      ]
                    ]
                  },
                  "Action": [
                    "s3:PutBucketNotification",
                    "s3:GetBucketNotification"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn",
                        {
                          "Ref": "AWS::Partition"
                        },
                        "lambda",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "function",
                        "*"
                      ]
                    ]
                  },
                  "Action": [
                    "lambda:AddPermission",
                    "lambda:RemovePermission"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CustomDashresourceDashexistingDashs3LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/import-service-v3/dev/1631620684623-2021-09-14T11:58:04.623Z/custom-resources.zip"
        },
        "FunctionName": "import-service-v3-dev-custom-resource-existing-s3",
        "Handler": "s3/handler.handler",
        "MemorySize": 1024,
        "Runtime": "nodejs12.x",
        "Timeout": 180,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleCustomResourcesLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "IamRoleCustomResourcesLambdaExecution"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "import-service-v3-dev",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceImport": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "import",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodImportOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceImport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodImportGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceImport"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "CUSTOM",
        "AuthorizerId": {
          "Ref": "AuthorizerArnApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ImportProductsFileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": "AuthorizerArnApiGatewayAuthorizer"
    },
    "AuthorizerArnApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 0,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "AuthorizerArn",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "AuthorizerUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::ImportValue": "AuthorizationARN"
              },
              "/invocations"
            ]
          ]
        },
        "Type": "TOKEN"
      }
    },
    "ApiGatewayDeployment1631620672223": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodImportOptions",
        "ApiGatewayMethodImportGet"
      ]
    },
    "ImportProductsFileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ImportProductsFileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AuthorizerArnLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::ImportValue": "AuthorizationARN"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CatalogBatchProcessEventSourceMappingSQSSQSQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 5,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "CatalogBatchProcessLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "SQSQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "import-service-sqs-parse"
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "createProductTopic"
      }
    },
    "SNSSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Endpoint": "bypavelsnigirev@gmail.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "SNSTopic"
        }
      }
    },
    "GatewayResponseAccessDenied": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "ACCESS_DENIED",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "GatewayResponseUnauthorized": {
      "Type": "AWS::ApiGateway::GatewayResponse",
      "Properties": {
        "ResponseParameters": {
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        },
        "ResponseType": "DEFAULT_4XX",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-import-service-v3-dev-ServerlessDeploymentBucketName"
      }
    },
    "ImportProductsFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ImportProductsFileLambdaVersion39ccRgXiM4ThDY8mh92Bw5wU3D5bkMtVwi8Vj9T4"
      },
      "Export": {
        "Name": "sls-import-service-v3-dev-ImportProductsFileLambdaFunctionQualifiedArn"
      }
    },
    "ImportFileParserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ImportFileParserLambdaVersionoFktyhw0fALH1lp45leWsX1fwOcCPFJKxcqGUfE"
      },
      "Export": {
        "Name": "sls-import-service-v3-dev-ImportFileParserLambdaFunctionQualifiedArn"
      }
    },
    "CatalogBatchProcessLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CatalogBatchProcessLambdaVersionFKpD70uxL3ZClLeSE0UWLABAMhYPLIptCcYmsQZNw"
      },
      "Export": {
        "Name": "sls-import-service-v3-dev-CatalogBatchProcessLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-import-service-v3-dev-ServiceEndpoint"
      }
    }
  }
}